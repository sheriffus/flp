(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)
Add LoadPath "/home/sheriff/research/why-2.19/lib/coq/".

Require Export Why.

Load list_ax_why.

(* Why obligation from file "test.why", line 15, characters 4-103: *)
(*Why goal*) Lemma reverse_aux_po_1 : 
  forall (L: erl_term),
  forall (Lprev: erl_term),
  forall (HW_1: (is_list L) = true /\ (is_list Lprev) = true),
  forall (HW_2: (is_nil (get_list L)) = true),
  (erl_list_length (get_list Lprev)) =
  ((erl_list_length (get_list L)) + (erl_list_length (get_list Lprev))).
Proof.
(* FILL PROOF HERE *)
intros.
assert ((get_list L) = nil).
elim (is_nil_t_ax (get_list L)).
intros.
apply H.
assumption .
rewrite H.
rewrite erl_list_length_nil_ax.
auto.
Save.

(* Why obligation from file "test.why", line 14, characters 8-76: *)
(*Why goal*) Lemma reverse_aux_po_2 : 
  forall (L: erl_term),
  forall (Lprev: erl_term),
  forall (HW_1: (is_list L) = true /\ (is_list Lprev) = true),
  forall (HW_3: ~((is_nil (get_list L)) = true)),
  ((is_list (erlang_list (tail (get_list L)))) = true /\
  (is_list (erlang_list (cons (head (get_list L)) (get_list Lprev)))) = true).
Proof.
(* FILL PROOF HERE *)
intros.
split.
apply (is_list_t_l (erlang_list (tail (get_list L))) (tail (get_list L))).
reflexivity .

apply ( is_list_t_l
          (erlang_list  ( cons  ( head (get_list L) ) (get_list Lprev) )
          )
                             ( cons  ( head (get_list L) ) (get_list Lprev) )
          ).
reflexivity.
Save.

(* Why obligation from file "test.why", line 15, characters 4-103: *)
(*Why goal*) Lemma reverse_aux_po_3 : 
  forall (L: erl_term),
  forall (Lprev: erl_term),
  forall (HW_1: (is_list L) = true /\ (is_list Lprev) = true),
  forall (HW_3: ~((is_nil (get_list L)) = true)),
  forall (HW_4: (is_list (erlang_list (tail (get_list L)))) = true /\
                (is_list
                 (erlang_list (cons (head (get_list L)) (get_list Lprev)))) =
                true),
  forall (result: erl_term),
  forall (HW_5: (erl_list_length (get_list result)) =
                ((erl_list_length
                  (get_list (erlang_list (tail (get_list L))))) +
                (erl_list_length
                 (get_list
                  (erlang_list (cons (head (get_list L)) (get_list Lprev))))))),
  (erl_list_length (get_list result)) =
  ((erl_list_length (get_list L)) + (erl_list_length (get_list Lprev))).
Proof.
(* FILL PROOF HERE *)
intros.
intuition.
rewrite HW_5.
rewrite (get_set_erl_list).
rewrite (get_set_erl_list).

rewrite (erl_list_length_cons_ax
               (get_list Lprev)
               (head (get_list L))
            ).

assert ((get_list L) = (cons (head (get_list L)) (tail (get_list L)))).

generalize  (erlang_list_ax (get_list L)).
intro.
destruct H3 as [rl [t Ht]].
intuition.
assert  (is_nil (get_list L) = true).
elim (is_nil_t_ax (get_list L));intros.
apply H5 ; assumption.
elim HW_3 ; assumption.

rewrite H3.
rewrite head_ax.
rewrite tail_ax.
reflexivity.

symmetry.
rewrite H3.
rewrite (erl_list_length_cons_ax
               (tail (get_list L))
               (head (get_list L))
            ).
rewrite tail_ax.

rewrite Zplus_permute.
rewrite Zplus_assoc.
reflexivity.
Save.

(* Why obligation from file "test.why", line 21, characters 5-36: *)
(*Why goal*) Lemma reverse_po_1 : 
  forall (L: erl_term),
  forall (HW_1: (is_list L) = true),
  ((is_list L) = true /\ (is_list (erlang_list nil)) = true).
Proof.
(* FILL PROOF HERE *)
intros.
split.
assumption.
apply (is_list_t_l (erlang_list nil) nil).
reflexivity.
Save.

(* Why obligation from file "test.why", line 22, characters 4-68: *)
(*Why goal*) Lemma reverse_po_2 : 
  forall (L: erl_term),
  forall (HW_1: (is_list L) = true),
  forall (HW_2: (is_list L) = true /\ (is_list (erlang_list nil)) = true),
  forall (result: erl_term),
  forall (HW_3: (erl_list_length (get_list result)) =
                ((erl_list_length (get_list L)) +
                (erl_list_length (get_list (erlang_list nil))))),
  (erl_list_length (get_list L)) = (erl_list_length (get_list result)).
Proof.
(* FILL PROOF HERE *)
intros.
rewrite HW_3.
rewrite get_set_erl_list.
rewrite erl_list_length_nil_ax.
intuition.
Save.

