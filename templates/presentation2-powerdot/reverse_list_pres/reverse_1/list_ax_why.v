(* This file was originally generated by why.
   It can be modified; only the generated parts will be overwritten. *)
Require Export Why.

(*Why type*) Definition erl_term: Set.
Admitted.

(*Why type*) Definition erl_list: Set.
Admitted.

(*Why logic*) Definition erlang_list : erl_list -> erl_term.
Admitted.

(*Why logic*) Definition erlang_integer : Z -> erl_term.
Admitted.

(*Why logic*) Definition get_list : erl_term -> erl_list.
Admitted.

(*Why logic*) Definition get_integer : erl_term -> Z.
Admitted.

(*Why axiom*) Lemma get_set_erl_list :
  (forall (l:erl_list), (get_list (erlang_list l)) = l).
Admitted.

(*Why logic*) Definition nil : erl_list.
Admitted.

(*Why logic*) Definition cons : erl_term -> erl_list -> erl_list.
Admitted.

(*Why axiom*) Lemma erlang_list_ax :
  (forall (l:erl_list),
   (exists rl:erl_list, (exists t:erl_term, l = nil \/ l = (cons t rl)))).
Admitted.

(*Why logic*) Definition head : erl_list -> erl_term.
Admitted.

(*Why logic*) Definition tail : erl_list -> erl_list.
Admitted.

(*Why axiom*) Lemma tail_ax :
  (forall (t:erl_term), (forall (l:erl_list), (tail (cons t l)) = l)).
Admitted.

(*Why axiom*) Lemma head_ax :
  (forall (t:erl_term), (forall (l:erl_list), (head (cons t l)) = t)).
Admitted.

(*Why logic*) Definition is_nil : erl_list -> bool.
Admitted.

(*Why axiom*) Lemma is_nil_t_ax :
  (forall (l:erl_list), ((is_nil l) = true <-> l = nil)).
Admitted.

(*Why axiom*) Lemma is_nil_cons_ax :
  (forall (t:erl_term), (forall (l:erl_list), (is_nil (cons t l)) = false)).
Admitted.

(*Why logic*) Definition is_list : erl_term -> bool.
Admitted.

(*Why axiom*) Lemma is_list_t_l :
  (forall (t:erl_term),
   (forall (l:erl_list), (t = (erlang_list l) -> (is_list t) = true))).
Admitted.

(*Why axiom*) Lemma is_list_l_t :
  (forall (t:erl_term),
   (exists l:erl_list, ((is_list t) = true -> t = (erlang_list l)))).
Admitted.

(*Why logic*) Definition erl_list_length : erl_list -> Z.
Admitted.

(*Why axiom*) Lemma erl_list_length_pos_ax :
  (forall (l:erl_list), (erl_list_length l) >= 0).
Admitted.

(*Why axiom*) Lemma erl_list_length_nil_ax : (erl_list_length nil) = 0.
Admitted.

(*Why axiom*) Lemma erl_list_length_cons_ax :
  (forall (l:erl_list),
   (forall (t:erl_term), (erl_list_length (cons t l)) =
    (1 + (erl_list_length l)))).
Admitted.

(*Why logic*) Definition nth : Z -> erl_list -> erl_term.
Admitted.

(*Why axiom*) Lemma nth_head_ax :
  (forall (t:erl_term), (forall (rl:erl_list), (nth 1 (cons t rl)) = t)).
Admitted.

(*Why axiom*) Lemma nth_tail_ax :
  (forall (t:erl_term),
   (forall (rl:erl_list),
    (forall (i:Z), (i >= 2 -> (nth i (cons t rl)) = (nth (i - 1) rl))))).
Admitted.

